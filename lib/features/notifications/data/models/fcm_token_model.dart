import '../../domain/entities/fcm_token_entity.dart';

class FcmTokenModel extends FcmTokenEntity {
  const FcmTokenModel({
    required super.id,
    required super.userId,
    required super.fcmToken,
    super.deviceType,
    super.deviceId,
    super.appVersion,
    super.isActive,
    required super.lastUsed,
    required super.createdAt,
  });

  factory FcmTokenModel.fromJson(Map<String, dynamic> json) {
    return FcmTokenModel(
      id: json['id'] ?? '',
      userId: json['user_id'] ?? '',
      fcmToken: json['fcm_token'] ?? '',
      deviceType: _parseDeviceType(json['device_type']),
      deviceId: json['device_id'],
      appVersion: json['app_version'],
      isActive: json['is_active'] ?? true,
      lastUsed:
          json['last_used'] != null
              ? DateTime.parse(json['last_used'])
              : DateTime.now(),
      createdAt:
          json['created_at'] != null
              ? DateTime.parse(json['created_at'])
              : DateTime.now(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'user_id': userId,
      'fcm_token': fcmToken,
      'device_type':
          deviceType != null ? _deviceTypeToString(deviceType!) : null,
      'device_id': deviceId,
      'app_version': appVersion,
      'is_active': isActive,
      'last_used': lastUsed.toIso8601String(),
      'created_at': createdAt.toIso8601String(),
    };
  }

  Map<String, dynamic> toInsertJson() {
    return {
      'user_id': userId,
      'fcm_token': fcmToken,
      'device_type':
          deviceType != null ? _deviceTypeToString(deviceType!) : null,
      'device_id': deviceId,
      'app_version': appVersion,
      'is_active': isActive,
    };
  }

  static DeviceType? _parseDeviceType(String? type) {
    switch (type) {
      case 'android':
        return DeviceType.android;
      case 'ios':
        return DeviceType.ios;
      case 'web':
        return DeviceType.web;
      default:
        return null;
    }
  }

  static String _deviceTypeToString(DeviceType type) {
    switch (type) {
      case DeviceType.android:
        return 'android';
      case DeviceType.ios:
        return 'ios';
      case DeviceType.web:
        return 'web';
    }
  }

  factory FcmTokenModel.fromEntity(FcmTokenEntity entity) {
    return FcmTokenModel(
      id: entity.id,
      userId: entity.userId,
      fcmToken: entity.fcmToken,
      deviceType: entity.deviceType,
      deviceId: entity.deviceId,
      appVersion: entity.appVersion,
      isActive: entity.isActive,
      lastUsed: entity.lastUsed,
      createdAt: entity.createdAt,
    );
  }

  factory FcmTokenModel.create({
    required String userId,
    required String fcmToken,
    DeviceType? deviceType,
    String? deviceId,
    String? appVersion,
  }) {
    final now = DateTime.now();
    return FcmTokenModel(
      id: '', // Will be generated by database
      userId: userId,
      fcmToken: fcmToken,
      deviceType: deviceType,
      deviceId: deviceId,
      appVersion: appVersion,
      isActive: true,
      lastUsed: now,
      createdAt: now,
    );
  }
}

import 'dart:io';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:package_info_plus/package_info_plus.dart';
import '../di/injection_container.dart';
import '../../features/notifications/domain/entities/fcm_token_entity.dart';
import '../../features/notifications/domain/usecases/register_fcm_token.dart';
import '../utils/user_data_helper.dart';
import 'logger_service.dart';

class FcmTokenService {
  static final FcmTokenService _instance = FcmTokenService._internal();
  factory FcmTokenService() => _instance;
  FcmTokenService._internal();

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final LoggerService _logger = LoggerService();

  String? _cachedToken;

  /// Get FCM token for push notifications
  Future<String?> getFcmToken() async {
    try {
      // Request permission first
      await _requestPermission();

      // Get the token
      final token = await _firebaseMessaging.getToken();

      if (token != null) {
        _cachedToken = token;
        _logger.logInfo('‚úÖ FCM Token received: ${token.substring(0, 20)}...');

        // Optionally register the token with your backend
        await _registerTokenWithBackend(token);
      } else {
        _logger.logWarning('‚ö†Ô∏è FCM Token is null');
      }

      return token;
    } catch (e) {
      _logger.logError('‚ùå Error getting FCM token: $e');
      return null;
    }
  }

  /// Get cached token (if available)
  String? getCachedToken() => _cachedToken;

  /// Request notification permissions
  Future<bool> _requestPermission() async {
    try {
      final settings = await _firebaseMessaging.requestPermission(
        alert: true,
        announcement: false,
        badge: true,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
        sound: true,
      );

      final isAuthorized =
          settings.authorizationStatus == AuthorizationStatus.authorized ||
          settings.authorizationStatus == AuthorizationStatus.provisional;

      _logger.logInfo(
        'üì± Notification permission: ${settings.authorizationStatus}',
      );
      return isAuthorized;
    } catch (e) {
      _logger.logError('‚ùå Error requesting permission: $e');
      return false;
    }
  }

  /// Register FCM token with backend (optional)
  Future<void> _registerTokenWithBackend(String token) async {
    try {
      // Get current user
      final userHelper = UserDataHelper();
      final currentUser = userHelper.getCurrentUser();

      if (currentUser == null) {
        _logger.logWarning('‚ö†Ô∏è No user logged in, skipping token registration');
        return;
      }

      // Get device info
      final deviceInfo = await _getDeviceInfo();
      final packageInfo = await PackageInfo.fromPlatform();

      // Create FCM token entity
      final fcmTokenEntity = FcmTokenEntity(
        id: '', // Will be generated by backend
        userId: currentUser.id,
        fcmToken: token,
        deviceType: _getDeviceType(),
        deviceId: deviceInfo,
        appVersion: packageInfo.version,
        isActive: true,
        lastUsed: DateTime.now(),
        createdAt: DateTime.now(),
      );

      // Register with backend
      final registerUseCase = sl<RegisterFcmTokenUseCase>();
      final result = await registerUseCase(
        RegisterFcmTokenParams(token: fcmTokenEntity),
      );

      result.fold(
        (failure) => _logger.logError(
          '‚ùå Failed to register FCM token: ${failure.message}',
        ),
        (success) => _logger.logInfo('‚úÖ FCM token registered successfully'),
      );
    } catch (e) {
      _logger.logError('‚ùå Error registering FCM token: $e');
    }
  }

  /// Get device type based on platform
  DeviceType _getDeviceType() {
    if (kIsWeb) return DeviceType.web;
    if (Platform.isAndroid) return DeviceType.android;
    if (Platform.isIOS) return DeviceType.ios;
    return DeviceType.android; // Default fallback
  }

  /// Get device ID/info
  Future<String> _getDeviceInfo() async {
    try {
      if (Platform.isAndroid) {
        return 'android_device_${DateTime.now().millisecondsSinceEpoch}';
      } else if (Platform.isIOS) {
        return 'ios_device_${DateTime.now().millisecondsSinceEpoch}';
      }

      return 'unknown_device_${DateTime.now().millisecondsSinceEpoch}';
    } catch (e) {
      _logger.logError('‚ùå Error getting device info: $e');
      return 'unknown_device_${DateTime.now().millisecondsSinceEpoch}';
    }
  }

  /// Set up token refresh listener
  void setupTokenRefreshListener() {
    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      _logger.logInfo(
        'üîÑ FCM Token refreshed: ${newToken.substring(0, 20)}...',
      );
      _cachedToken = newToken;
      _registerTokenWithBackend(newToken);
    });
  }
}
